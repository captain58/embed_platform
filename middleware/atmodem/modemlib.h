/****************************************Copyright (c)**************************************************
**                               	____科技有限公司
**                                     		开发部
**
**
**--------------文件信息--------------------------------------------------------------------------------
**文   件   名: modemlib.h
**创   建   人: yzy
**最后修改日期: 2007年3月3日
**描        述: 各个模块驱动函数集的配置文件
**注        意:
**--------------历史版本信息----------------------------------------------------------------------------
** 创建人: yzy
** 版  本: v1.0
** 日　期: 2007年3月3日
** 描　述: 原始版本
********************************************************************************************************/
#ifndef _MODEMLIB_H_
#define _MODEMLIB_H_



#ifndef EXT_MODEMLIB
#define EXT_MODEMLIB extern
#endif
#include "aos/bdef.h"

//	
//	/************************************************************************
//	 * @function: LineLen
//	 * @描述: 从缓存中获取第一行数据的长度(包括一个结尾符)
//	 * 
//	 * @参数: 
//	 * @param: buffer 缓存
//	 * @param: len 缓存数据长度
//	 * @param: ebytes 结尾符长度
//	 * 
//	 * @返回: 
//	 * @return: uint8  行长度(包括一个结尾符)
//	 *              0表示无数据或未找到行结束符,1表示仅读到结尾符
//	 * @说明: 
//	 * @作者: yzy (2014/11/13)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	uint16 LineLen(uint8* buffer, uint16 len, uint16* ebytes);
//	
//	
//	
//	/************************************************************************
//	 * @function: GetOneChar
//	 * @描述: 从串口缓存中的当前行中读取一个ASCII字符形式的数字
//	 * 
//	 * @参数: 
//	 * @param: rbyte 存放最后读取的那个字节(256表示串口已无数据可读)
//	 * 
//	 * @返回: 
//	 * @return: uint16  0-0xFFFE 转换好的数字
//	 *                  0xFFFF 没有找到可转换的字符
//	 * @说明: 
//	 * @作者: yzy (2014/11/13)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	uint16 GetOneChar(uint16* rbyte);
//	
//	
//	/************************************************************************
//	 * @function: DecodeRecvDataNone
//	 * @描述: 去除这一行中剩下的数据
//	 * 
//	 * @参数: 
//	 * @param: mrfb 处理后的信息结构(该函数用不到)
//	 * @返回: 
//	 * @说明: 
//	 * @作者: yzy (2014/11/13)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	void DecodeRecvDataNone(ModemRecvFeedBack* mrfb);
//	
//	
//	/************************************************************************
//	 * @function: DecodeRecvDataOneChar
//	 * @描述: 从串口缓存的第一行中解析一个数字,然后去除这一行中剩下的数据
//	 * 
//	 * @参数: 
//	 * @param: mrfb 处理后的信息结构
//	 * @返回: 
//	 * @说明: 
//	 * @作者: yzy (2014/11/13)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	void DecodeRecvDataOneChar(ModemRecvFeedBack* mrfb);
//	
//	
//	/************************************************************************
//	 * @function: DecodeRecvDataTwoChar
//	 * @描述: 从串口缓存的第一行中解析二个数字,然后去除这一行中剩下的数据
//	 * 
//	 * @参数: 
//	 * @param: mrfb 处理后的信息结构
//	 * @返回: 
//	 * @说明: 
//	 * @作者: yzy (2014/11/13)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	void DecodeRecvDataTwoChar(ModemRecvFeedBack* mrfb);
//	
//	
//	/************************************************************************
//	 * @function: DecodeAndEnqueuePduMsg
//	 * @描述: 解析PDU短信
//	 * 
//	 * @参数: 
//	 * @param: rbyte 当前行的第一个ASCII码数字
//	 * 
//	 * @返回: 
//	 * @return: bool  true 得到了一个完整的短信帧
//	 *                false 解析失败
//	 * @说明: 
//	 * @作者: yzy (2014/11/13)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	bool DecodeAndEnqueuePduMsg(uint8 rbyte);



//	#define PeekByte(B, S, X)    SER_Peek(SYS_GPRS_PORT, B, S, X)
//	#define DequeueByte(X)       SER_RecvData(SYS_GPRS_PORT, __NULL, X,0)
//	#define DequeueLine()        SER_Line(SYS_GPRS_PORT, __NULL, 0xFFFF);
//	#define ReadNextByte()		 SER_ReadByte(SYS_GPRS_PORT)
//	#define SendCommadData(X, Y) SER_SendData(SYS_GPRS_PORT, X, Y, 100) //SYS_SER_WriteOption(SYS_GPRS_PORT, X, Y, 0x01)
//	#define PrintValueData(X, Y) SER_PrintValueOption(SYS_GPRS_PORT, X, Y, 0x01)

int DecodeStrTwoChar(uint8_t *rcv, uint8_t * out);
int DecodeStrOneChar(uint8_t *rcv, uint8_t * out);
int DecodeStrFourChar(uint8_t *rcv, uint8_t * out);
int DecodeStrOneShort(uint8_t *rcv, uint16_t * out);
int DecodeStrOneLong(uint8_t *rcv, uint32_t * out);


#endif
