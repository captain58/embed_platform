/****************************************Copyright (c)**************************************************
**                                  ______科技有限公司
**                                          开发部
**
**
**--------------文件信息--------------------------------------------------------------------------------
**文   件   名: SimpleCalcLib.h
**创   建   人: yzy
**最后修改日期: 2006年8月4日
**描        述: 简单数据处理函数库头文件
**注        意:
**--------------历史版本信息----------------------------------------------------------------------------
** 创建人: yzy
** 版  本: v1.0
** 日　期: 2006年8月4日
** 描　述: 原始版本
********************************************************************************************************/
#ifndef _SIMPLECALCLIB_H_
#define _SIMPLECALCLIB_H_



#include "stdint.h"
//十进制乘法运算的倍数
extern const uint32 guls_Do10Value[10];


extern const uint8 Bit_Mask8[9];        //8位掩码
extern const uint16 Bit_Mask16[17];     //16位掩码
extern const uint8 Bit_Map8[8];         //8位位码
extern const uint16 Bit_Map16[16];      //16位位码
extern const uint32 Bit_Map32[32];
extern const uint32 Bit_Mask32[33];
extern const uint8 Bit_Maps[256];       //位码,用来计算Fn这种数据比较快



extern const uint16 gui_DayMinCount;    //每天的分钟数
extern const uint16 gui_HourSecCount;   //每小时的秒数
extern const uint16 gui_QuartYearDay;   //4年的天的数量
extern const uint32 gul_DaySecCount;    //1天中秒的数量
                                        //4年中每年开始的数量
extern const uint16 gui_FourYearDayLoop[4];
extern const uint8 guc_LYearMonth[12];  //平年每个月的天数
extern const uint8 guc_BYearMonth[12];  //闰年每个月的天数
                                        //每个月开始的天数
extern const uint16 gui_MonthBeginDay[12];







/******************************************************************************
**真假返回宏
******************************************************************************/
#define _IF_TRUE_DO(X, Y)   {if(X){Y;}}
#define _IF_TRUE_DO_RETURN(X, Y)   {if(X){Y; return;}}
#define _IF_TRUE_RETURN_Z(X,Z)  {if(X){return (Z);}}
#define _IF_TRUE_RETURN_VOID(X) {if(X){return;}}
#define _IF_TRUE_DO_RETURN_Z(X,Y,Z){if(X){Y;return (Z);}}
#define _IF_TRUE_ELSE(X,Y,Z)    {if(X){Y;}else{Z;}}
#define _IF_TRUE_CONTINUE(X) {if(X){continue;}}





/******************************************************************************
**最值比较宏
******************************************************************************/
#define MaxVal(X,Y)     ((X) >=(Y)?(X):(Y))
#define MinVal(X,Y)     ((X) <=(Y)?(X):(Y))




/******************************************************************************
**定义4字节对齐方式以及某类型的4字节含量
******************************************************************************/
#define SA_4B_SORTED(X)     (((X) & 3) == 0?(X):(((X)& 0xFFFFFFFC) + 4))
#define SA_4B_OFT(T)        SA_4B_SORTED(sizeof(T))
#define SA_8B_SORTED(X)     (((X) & 7) == 0?(X):(((X)& 0xFFFFFFF8) + 8))
#define SA_8B_OFT(T)        SA_8B_SORTED(sizeof(T))
#define SA_64B_SORTED(X)   (((X) & 0xFF) == 0?(X):(((X)& 0xFFFFFFC0) + 0x40))
#define SA_64B_OFT(T)       SA_64B_SORTED(sizeof(T))
#define SA_256B_SORTED(X)   (((X) & 0xFF) == 0?(X):(((X)& 0xFFFFFF00) + 0x100))
#define SA_256B_OFT(T)      SA_256B_SORTED(sizeof(T))
#define SA_4096B_SORTED(X)  (((X) & 0xFFF) == 0?(X):(((X)& 0xFFFFF000) + 0x1000))
#define SA_4096B_OFT(T)     SA_4096B_SORTED(sizeof(T))




/***********************************************************
**定义地址和长度的一一对应关系，从而方便结构体和缓存的转换
************************************************************/
typedef struct
{
    void* addr;
    uint16 len;
    uint16 atr;
}StrBuffer;

/***********************************************************
**定义地址偏移和长度的一一对应关系，从而方便结构体和缓存的转换
************************************************************/
typedef struct
{
    uint16 offset;
    uint16 len;
    uint16 atr;
}StrBufOffset;

 

/************************************************************************
 * @function: MoveBuffer
 * @描述: 移动缓存值
 * 
 * @参数: 
 * @param: sbuff 源地址
 * @param: tbuff 目标地址
 * @param: length 移动的字节数
 * 
 * @返回: 
 * @return: void  
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void MoveBuffer(uint8* sbuff, uint8* tbuff, uint32 length);

/************************************************************************
 * @function: InvBuffer
 * @描述: 字节翻转
 * 
 * @参数: 
 * @param: buff 要字节翻转的缓存
 * @param: length 待翻转的字节数
 * 
 * @返回: 
 * @return: void  
 * @说明: 将一个缓存中的字节的顺序进行反转。
 *         比如buff[0] = 0x12, buff[1] = 0x34, buff[2] = 0x56,
 *         buff[3] = 0x78，那么反转后的结果为buff[0] = 0x78,
 *         buff[1] = 0x56, buff[2] = 0x34, buff[3] = 0x12
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void InvBuffer(uint8* buff, uint32 length);

/************************************************************************
 * @function: CmpBuffer
 * @描述: 比较缓存是否一致
 * 
 * @参数: 
 * @param: buff1 比较的缓存1
 * @param: buff2 比较的缓存2
 * @param: length 比较的长度
 * 
 * @返回: 
 * @return: uint8 
 *      0: 两个缓存的内容一样
 *      1: 两个缓存的内容不一样，buff1 > buff2
 *      2: 两个缓存的内容不一样，buff1 < buff2
 * @说明: 比较两个缓存里面的内容。从每个缓存的第一个字节开始比较，
 *        直到不一样之后退出，不一样的那两个字节的大小代表了两个缓存的大小。
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 CmpBuffer(uint8* buff1, uint8* buff2, uint32 length);

/************************************************************************
 * @function: ClearBuffer
 * @描述: 清零缓存
 * 
 * @参数: 
 * @param: buff 要清零的缓存
 * @param: length 要清零的字节数
 * @返回: 
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void ClearBuffer(uint8* buff, uint32 length);

/************************************************************************
 * @function: memset
 * @描述: 置数缓存
 * 
 * @参数: 
 * @param: buffer 要置数的缓存
 * @param: val 要置数的值
 * @param: length 要置数的字节数
 * @返回: 
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
//void memset(void* buffer, uint8 val, uint32 length);

/************************************************************************
 * @function: strlen
 * @描述: 计算字符串的长度
 * 
 * @参数: 
 * @param: str 字符串
 * 
 * @返回: 
 * @return: uint16  字符串的长度
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
//uint16 strlen(string str);

/************************************************************************
 * @function: memcpy
 * @描述: 拷贝缓存
 * 
 * @参数: 
 * @param: tb 源地址
 * @param: sb 目标地址
 * @param: length 移动的字节数
 * @返回: 
 * @说明: 功能同 MoveBuffer()
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
//void memcpy(void* tb, void* sb, uint32 length);

/************************************************************************
 * @function: strcpy
 * @描述: 拷贝字符串
 * 
 * @参数: 
 * @param: str1 目标字符串
 * @param: str2 源字符串
 * 
 * @返回: 
 * @return: uint16 字符串的长度
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
//uint16 strcpy(string str1, string str2);

/************************************************************************
 * @function: strstr
 * @描述: 查找字符串
 * 
 * @参数: 
 * @param: str1 被查找字符串
 * @param: str2 要查找字符串
 * 
 * @返回: 
 * @return: 若str2若是str1的子串，则返回str1在str2首位置的地址，如果不是，则返回NULL
 * @说明: 
 * @作者: yzy (2015/3/16)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
//	char * strstr(const char * str1, const char * str2);
//	
//	/************************************************************************
//	 * @function: strchr
//	 * @描述: 查找字符串s中首次出现c的位置
//	 * 
//	 * @参数: 
//	 * @param: s 被查找字符串
//	 * @param: c 要查找字符
//	 * 
//	 * @返回: 
//	 * @return: 返回首次出现c的位置的指针，如果s中不存在c则返回NULL
//	 * @说明: 
//	 * @作者: yzy (2015/3/16)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	char * strchar(const char * s, char c);
//	
//	/************************************************************************
//	 * @function: strcat
//	 * @描述: 把src所指字符串添加到dest结尾处(覆盖dest结尾处的'\0')并添加'\0'。
//	 * 
//	 * @参数: 
//	  * @param: strDest 目标字符串
//	 * @param: strSrc   源字符串
//	 * 
//	 * @返回: 
//	 * @return: 返回dest的指针。
//	 * @说明: 
//	 * @作者: yzy (2015/3/16)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	char * strcat(char * strDest,const char * strSrc);

/************************************************************************
 * @function: strrchr
 * @描述:查找一个字符c在另一个字符串str中末次出现的位置
 * 
 * @参数: 
 * @param: s 被查找字符串
 * @param: c 要查找字符
 * 
 * @返回: 
 * @return: 查找成功就返回字符串，失败则返回NULL
 * @说明: 
 * @作者: yzy (2015/3/16)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
//char * strrchr (const char *s, char c);


/************************************************************************
 * @function: Divu8
 * @描述: 两个8位数相除
 * 
 * @参数: 
 * @param: bediv 被除数
 * @param: div 除数
 * 
 * @返回: 
 * @return: Word16  商和余数
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
Word16 Divu8(uint8 bediv, uint8 div);

/************************************************************************
 * @function: Divu16
 * @描述: 两个16位数相除
 * 
 * @参数: 
 * @param: bediv 被除数
 * @param: div 除数
 * 
 * @返回: 
 * @return: Word32  商和余数
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
Word32 Divu16(uint16 bediv, uint16 div);

/************************************************************************
 * @function: ByteToInt
 * @描述: 将两字节的数据转换成一个16位的数
 * 
 * @参数: 
 * @param: byte 存放要转换的两个字节的缓存
 * 
 * @返回: 
 * @return: uint16  两个字节转换成16位数之后的结果
 * @说明: 比如byte[0] = 0x03, byte[1] = 0x02那么转换后的结果为0x0203
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 ByteToInt(uint8* byte);
/************************************************************************
 * @function: RByteToInt
 * @描述: 将两字节的数据转换成一个16位的数
 * 
 * @参数: 
 * @param: byte 存放要转换的两个字节的缓存
 * 
 * @返回: 
 * @return: uint16  两个字节转换成16位数之后的结果
 * @说明: 比如byte[0] = 0x03, byte[1] = 0x02那么转换后的结果为0x0203
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 RByteToInt(uint8* byte);

/************************************************************************
 * @function: ByteToLong
 * @描述: 四个字节转换成32位数
 * 
 * @参数: 
 * @param: byte 存放要转换的四个字节的缓存
 * 
 * @返回: 
 * @return: uint32  四个字节转换成32位数之后的结果
 * @说明: 比如byte[0] = 0x03, byte[1] = 0x02,
 *         byte[2] = 0x04, byte[3] = 0x05，
 *         那么转换后的结果为0x05040203
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint32 ByteToLong(uint8* byte);
uint32 RByteToLong(uint8* byte);

/************************************************************************
 * @function: ByteToInt24
 * @描述: 三个字节转换成24位数
 * 
 * @参数: 
 * @param: byte 存放要转换的三个字节的缓存
 * 
 * @返回: 
 * @return: uint32  三个字节转换成24位数之后的结果
 * @说明: 比如byte[0] = 0x03, byte[1] = 0x02, byte[2] = 0x04，
 *        那么转换后的结果为0x040203
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint32 ByteToInt24(uint8* byte);
/************************************************************************
 * @function: RByteToInt24
 * @描述: 三个字节转换成24位数
 * 
 * @参数: 
 * @param: byte 存放要转换的三个字节的缓存
 * 
 * @返回: 
 * @return: uint32  三个字节转换成24位数之后的结果
 * @说明: 比如byte[0] = 0x03, byte[1] = 0x02, byte[2] = 0x04,
 *        那么转换后的结果为0x040203
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint32 RByteToInt24(uint8* byte);

/************************************************************************
 * @function: IntToByte
 * @描述: 类型转换
 * 
 * @参数: 
 * @param: byte 存放转换后的两个字节的缓存
 * @param: value 需要转换的值
 * @返回: 
 * @说明: value = 0x0102,那么转换之后的结果为byte[0]=0x02, byte[1] = 0x01
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void IntToByte(uint8* byte, uint16 value);

/************************************************************************
 * @function: LongToByte
 * @描述: 类型转换
 * 
 * @参数: 
 * @param: byte 存放转换后的四个字节的缓存
 * @param: value 需要转换的值
 * @返回: 
 * @说明: 比如value = 0x01020304,那么转换之后的结果为byte[0]=0x04,
 *        byte[1] = 0x03，byte[2] = 0x02, byte[3] = 0x01
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void LongToByte(uint8* byte,  uint32 value);

/************************************************************************
 * @function: Int24ToByte
 * @描述: 类型转换
 * 
 * @参数: 
 * @param: byte 存放转换后的四个字节的缓存
 * @param: value 需要转换的值
 * @返回: 
 * @说明: 比如value = 0x010203,那么转换之后的结果为byte[0]=0x03,
 *        byte[1] = 0x02，byte[2] = 0x01
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void Int24ToByte(uint8* byte,  uint32 value);

/************************************************************************
 * @function: ByteBcdToHex
 * @描述: 单字节BCD转换成HEX
 * 
 * @参数: 
 * @param: bcd 要转换的Bcd码
 * 
 * @返回: 
 * @return: uint8  将BCD码转换成HEX之后的结果
 * @说明: 比如输入0x12,输出12
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 ByteBcdToHex(uint8 bcd);

/************************************************************************
 * @function: ByteArrayBcdToHex
 * @描述: 多个字节BCD转换成HEX
 * 
 * @参数: 
 * @param: bcdary 要转换的Bcd数组
 * @param: hexary 输出的hex数组缓存
 * @param: len 要转换的字节数
 * @返回: 
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void ByteArrayBcdToHex(uint8* bcdary, uint8* hexary, uint32 len);

/************************************************************************
 * @function: IntBcdToHex
 * @描述: 双字节BCD转换成HEX
 * 
 * @参数: 
 * @param: bcd 要转换的Bcd码
 * 
 * @返回: 
 * @return: uint16  将BCD码转换成HEX之后的结果
 * @说明: 输入 0x1234,输出 1234
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 IntBcdToHex(uint16 bcd);

/************************************************************************
 * @function: LongBcdToHex
 * @描述: 4字节BCD转换成HEX
 * 
 * @参数: 
 * @param: bcd 要转换的Bcd码
 * 
 * @返回: 
 * @return: uint32  将BCD码转换成HEX之后的结果
 * @说明: 输入 0x12345678,输出 12345678
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint32 LongBcdToHex(uint32 bcd);

/************************************************************************
 * @function: ByteHexToBcd
 * @描述: 单字节HEX转换成BCD
 * 
 * @参数: 
 * @param: hex 要转换的hex码 (hex < 100)
 * 
 * @返回: 
 * @return: uint8  将hex码转换成bcd之后的结果
 * @说明: 比如hex = 0x12, 那么转换后的结果为0x18
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 ByteHexToBcd(uint8 hex);

/************************************************************************
 * @function: ByteArrayHexToBcd
 * @描述: 多字节HEX转换成HEX
 * 
 * @参数: 
 * @param: hexary 需要转换的数据
 * @param: bcdary 转换好的字节数组
 * @param: len 需要转换的数据的长度
 * @返回: 
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void ByteArrayHexToBcd(uint8* hexary, uint8* bcdary, uint32 len);

/************************************************************************
 * @function: IntHexToBcd
 * @描述: 双字节HEX转换成BCD
 * 
 * @参数: 
 * @param: hex 要转换的hex码(hex < 10000)
 * 
 * @返回: 
 * @return: uint16  将hex码转换成bcd之后的结果
 * @说明: 输入 1234 ,输出 0x1234 
 *	      采用模拟除以100的方法来进行转换
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 IntHexToBcd(uint16 hex);

/************************************************************************
 * @function: LongHexToBcd
 * @描述: 4字节HEX转换成BCD
 * 
 * @参数: 
 * @param: hex 要转换的hex码(hex < 100000000)
 * 
 * @返回: 
 * @return: uint32  将hex码转换成bcd之后的结果
 * @说明: 输入 1234567 输出 0x1234567
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint32 LongHexToBcd(uint32 hex);
/************************************************************************
 * @function: LongBcdToHex
 * @描述: 8字节BCD转换成HEX
 * 
 * @参数: 
 * @param: bcd 要转换的Bcd码
 * 
 * @返回: 
 * @return: uint64  将BCD码转换成HEX之后的结果
 * @说明: 输入 0x1234567812345678,输出 1234567812345678
 * @作者: yzy (2019/9/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint64 LongLongBcdToHex(uint64 bcd);

/************************************************************************
 * @function: BcdToHex
 * @描述: 将指定字节数的BCD码转换成指定字节数的HEX码
 * 
 * @参数: 
 * @param: bcd 要转换的BCD码的存放位置
 * @param: hex 转换后的HEX码存放的位置
 * @param: nbcd 要转换的BCD码的字节数(<=5)
 * @param: nhex 转换后的HEX码的字节数(<=4)
 * @返回: 
 * @说明: 比如bcd[0] = 0x55, bcd[1] = 0x02, nbcd = 2, nhex = 1,
 *        那么转换后的结果为 hex[0] = 0xff（bcd 可以等于 hex）
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void BcdToHex(uint8* bcd, uint8* hex, uint8 nbcd, uint8 nhex);

/************************************************************************
 * @function: HexToBcd
 * @描述: 将指定字节数的hex码转换成指定字节数的BCD码
 * 
 * @参数: 
 * @param: bcd 转换后的BCD码的存放位置
 * @param: hex 要转换的HEX码存放的位置
 * @param: nbcd 转换后的BCD码的字节数 (<=5)
 * @param: nhex 要转换的HEX码的字节数 (<=4)
 * @返回: 
 * @说明: 比如hex[0] = 255, nhex = 1, nbcd =2, 那么转换后的结果为
 *          Bcd[0] = 0x55, bcd[1] = 0x02
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void HexToBcd(uint8* bcd, uint32 hex, uint8 nbcd, uint8 nhex);

/************************************************************************
 * @function: IsHexChar
 * @描述: 判断ch是否属于合法的字符格式的hex码
 * 
 * @参数: 
 * @param: ch 需要判断的字符
 * 
 * @返回: 
 * @return: uint8  true: ch是'0'-'9','A'-'F','a'-'f'中的成员
 *                false: ch不是'0'-'9','A'-'F','a'-'f'中的成员
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 IsHexChar(uint8 ch);
uint8 IsAsciiChar(uint8 ch);

/************************************************************************
 * @function: IsBcd
 * @描述: 判断是否属于合法的压缩型的BCD码
 * 
 * @参数: 
 * @param: bcd 需要判断的字符
 * 
 * @返回: 
 * @return: uint8  true
 *                false
 * @说明: 比如bcd=0xA5,返回false,bcd=0x55,返回true
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 IsBcd(uint32 bcd);

/************************************************************************
 * @function: IsBcdChar
 * @描述: 判断ch是否属于合法的字符格式的BCD码
 * 
 * @参数: 
 * @param: ch 需要判断的字符
 * 
 * @返回: 
 * @return: uint8  true: ch是'0'-'9'中的成员
 *                false: ch不是'0'-'9'中的成员
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 IsBcdChar(uint8 ch);

/************************************************************************
 * @function: HexCharToValue
 * @描述: 数值转换
 * 
 * @参数: 
 * @param: ch 需要转换的字符
 * 
 * @返回: 
 * @return: uint8  Ch如果是'0'-'9','A'-'F','a'-'f'中的成员那么输出其转换后的值，
 *                 否则输出0xFF表示无法转换
 * @说明: 比如ch = 'a', 那么转换后是0x0A, 如果ch = 0x01,那么将返回0xff
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 HexCharToValue(uint8 ch);

/************************************************************************
 * @function: ValueToHexChar
 * @描述: HexCharToValue的反运算
 * 
 * @参数: 
 * @param: val 要转换的值.范围0-0x0f 
 * @param: iscap 输出的ascii是否为大写 
 * 
 * @返回: 
 * @return: uint8  0xFF:无法转换 
 *         如val=11, 若iscap为真则输出'B';为假,则输出'b'.
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 ValueToHexChar(uint8 val, uint8 iscap);

/************************************************************************
 * @function: BcdCharToValue
 * @描述: 数值转换
 * 
 * @参数: 
 * @param: ch 需要转换的字符
 * 
 * @返回: 
 * @return: uint8  Ch如果是'0'-'9'中的成员那么输出其转后的值,否则输出0xFF表示无法转换
 * @说明: 比如ch = '9',那么转换后是0x09, 如果ch ='a',那么将返回0xff表示无法转换
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 BcdCharToValue(uint8 ch);


/************************************************************************
 * @function: BcdStringToNum
 * @描述: BCD格式字符串表示为数值
 * 
 * @参数: 
 * @param: ch 需要转换的字符串
 * @param: length 需要转换的字符串的长度(<=9)
 * 
 * @返回: 
 * @return: uint32  0－999999999转换后的结果,>999999999无法转换
 * @说明: 比如ch[0] = '2',ch[1] = '1', ch[2] = '3',
 *        length = 3那么转换后的结果为213; 如果ch[0] = 'f',
 *        那么将返回1000000000
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint32 BcdStringToNum(uint8* ch, uint8 length);

/************************************************************************
 * @function: NumToBcdString
 * @描述: 数值表示为BCD格式字符串
 * 
 * @参数: 
 * @param: ch 转换后的字符串
 * @param: num 需要转换的数
 * @param: format 表示是否需要格式化转换 0:不需要
 *                  1-9转换后的字符长度,如果不足,前面的字节用0代替
 * 
 * @返回: 
 * @return: uint8  1-9转换后的有效长度.
 * @说明: byte = 56,format = 0,那么转换后的结果为 ch[0] = '5', ch[1] = '6', 返回值为2
 *        byte = 56, format = 8, 那么转换后的结果为ch[0]~ch[5] = '0',
 *        ch[6] = '5', ch[7] = '6', 返回值为2
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 NumToBcdString(uint8* ch, uint32 num, uint8 format);

/************************************************************************
 * @function: HexStringToNum
 * @描述: HEX格式字符串表示为数值
 * 
 * @参数: 
 * @param: ch 需要转换的字符串
 * @param: byte 转换后的字节数组
 * @param: length 一共要转换的字符数（偶数才是合法的）
 * 
 * @返回: 
 * @return: uint8  true 转换成功
 *	              false 转换失败
 * @说明: 比如 ch = "567F",那么转换之后的结果为byte[0] = 0x56,byte[1] = 0x7F
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 HexStringToNum(uint8* ch, uint8* byte, uint16 length);

/************************************************************************
 * @function: NumToHexString
 * @描述: 数值表示为BCD格式字符串
 * 
 * @参数: 
 * @param: ch 转换后的字符串
 * @param: byte 需要转换的字节数组
 * @param: length 一共要转换的字节数
 * 
 * @返回: 
 * @return: uint8 0成功.其他失败
 * @说明: 刚好是HexStringToNum的逆过程
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 NumToHexString(uint8* ch, uint8* byte, uint16 length);

/************************************************************************
 * @function: ByteArrayBcdToHexString
 * @描述: 将BCD字节串转成ascii
 * 
 * @参数: 
 * @param: bcdary 需要转换的数据
 * @param: ascii 转换好的字符串
 * @param: len 需要转换的数据的长度
 * @param: big 是否big-endian输出
 * @返回: 
 * @说明: 如 hexary[0] = 0x01, hexary[1] = 0x0A, len = 2, 
 *       若big为真,输出ascii[0]-[3]为 '0' '1' '0' 'A' 
 *       若big为假,输出ascii[0]-[3]为 '0' 'A' '0' '1'
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void ByteArrayBcdToHexString(uint8* bcdary, uint8* ascii, uint32 len, uint8 big);

/************************************************************************
 * @function: AbsVal
 * @描述: 
 * 
 * @参数: 
 * @param: value 原数据
 * 
 * @返回: 
 * @return: uint32  绝对值
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint32 AbsVal(int32 value);

/************************************************************************
 * @function: AbsVal64
 * @描述: 
 * 
 * @参数: 
 * @param: value 原数据
 * 
 * @返回: 
 * @return: uint32  绝对值
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint64 AbsVal64(int64 value);

/************************************************************************
 * @function: DoSum
 * @描述: 累加和计算
 * 
 * @参数: 
 * @param: buff 需要计算累加和的字符数组
 * @param: length 需要计算累加和的字节数
 * 
 * @返回: 
 * @return: uint16  计算后的累加和
 * @说明: 计算后的累加和，大于65536将自动溢出
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 DoSum(uint8* buff, uint16 length);

/************************************************************************
 * @function: DoBitSum
 * @描述: 位加和计算
 * 
 * @参数: 
 * @param: buff 需要计算位加和(异或)的字符数组
 * @param: length 需要计算位加和的字节数
 * 
 * @返回: 
 * @return: uint8  计算后的位加和
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 DoBitSum(uint8* buff, uint16 length);

/************************************************************************
 * @function: DoCrc16
 * @描述: CRC16校验和计算
 * 
 * @参数: 
 * @param: buff 需要计算CRC16的字节数组
 * @param: length 需要计算CRC16的字节数
 * @param: init 计算CRC16的初始值
 * 
 * @返回: 
 * @return: uint16  计算后的CRC值
 * @说明: 多项式 X16 + X12 + X5 + X1
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 DoCrc16(uint8* buff, uint16 length, uint16 init);

/************************************************************************
 * @function: DoCrcDlms
 * @描述: DLMS帧的crc计算函数
 * 
 * @参数: 
 * @param: buffer 
 * @param: length 
 * @param: init 
 * 
 * @返回: 
 * @return: uint16  
 * @说明: 
 * @作者: yzy (2014/5/26)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 DoCrcDlms(uint8* buffer, uint16 length, uint16 init);
uint16_t DoCrcRtuModbus(uint8_t *buf,uint16_t trans_length,uint16_t crc);

/************************************************************************
 * @function: CalcWeek
 * @描述: 根据时间计算星期(以07年1月1日为基准,07年1月1日星期一)
 * 
 * @参数: 
 * @param: date 日月年,HEX 
 * 
 * @返回: 
 * @return: uint8  星期(0-6,星期天为0).
 *                  0xFF表示输入格式有误
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 CalcWeek(uint8* date, uint8 start);

/************************************************************************
 * @function: CalcDayHex
 * @描述: 计算指定时刻的总天数(以00年1月1日为基准)
 * 
 * @参数: 
 * @param: year 年
 * @param: month 月
 * @param: day 日
 * 
 * @返回: 
 * @return: uint16  将所有的数据转换成天之后的值
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 CalcDayHex(uint8 year, uint8 month, uint8 day);

/************************************************************************
 * @function: CalcHourHex
 * @描述: 计算指定时刻的总小时数
 * 
 * @参数: 
 * @param: year 年,hex
 * @param: month 月
 * @param: day 日
 * @param: hour 时
 * 
 * @返回: 
 * @return: uint32  
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint32 CalcHourHex(uint8 year, uint8 month, uint8 day, uint8 hour);

/************************************************************************
 * @function: CalcMinuteHex
 * @描述: 计算指定时刻的总分种数
 * 
 * @参数: 
 * @param: year 年,hex
 * @param: month 月
 * @param: day 日
 * @param: hour 时
 * @param: mins 分
 * 
 * @返回: 
 * @return: uint32  
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: yzy
 * 更改函数原型
 ************************************************************************/
uint32 CalcMinuteHex(uint8 year, uint8 month, uint8 day, uint8 hour, uint8 mins);

/************************************************************************
 * @function: CalcMins
 * @描述: 计算指定时刻的总分种数
 * 
 * @参数: 
 * @param: time B0-B4:分时日月年
 * @param: isbcd 1bcd,0hex
 * 
 * @返回: 
 * @return: uint32  将所有的数据转换成分之后的值
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint32 CalcMins(uint8* time, uint8 isbcd);

/************************************************************************
 * @function: CalcSecs
 * @描述: 计算指定时刻的总秒数
 * 
 * @参数: 
 * @param: time B0-B5:秒分时日月年
 * @param: isbcd 1bcd,0hex
 * 
 * @返回: 
 * @return: uint32  
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint32 CalcSecs(uint8* time, uint8 isbcd);

/************************************************************************
 * @function: CalcTimeFromMins
 * @描述: CalcMins()反函数
 * 
 * @参数: 
 * @param: out B0-B4:mmHHDDMMYY,hex
 * @param: mins 总分钟数 
 * @返回: 
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void CalcTimeFromMins(uint8* out, uint32 mins);

/************************************************************************
 * @function: CalcTimeFromSecs
 * @描述: CalcSecs()反函数
 * 
 * @参数: 
 * @param: out B0-B5:ssmmHHDDMMYY,hex
 * @param: secs 分钟数 
 * @返回: 
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void CalcTimeFromSecs(uint8* out, uint32 secs);

/************************************************************************
**函数名uint8bool StepMins(uint8* time, int32 step)
**描 述: 对时间进行分步进
**
**输 入: time YYMMDDHHmm(hex,年在前)
         step 步进的分钟数
**输 出: true成功 false失败
**
**备 注: 如time指向 08-01-31 23:59:01,step = 15,则输出time为 08-02-01 00:14:01
**--------------------------------------------------------
**作 者: yzy
**日 期: 2009-5-5
*************************************************************************/
uint8 StepMins(uint8* time, int32 step);

/************************************************************************
 * @function: U16_little_big_endian
 * @描述: 从little_endian的形式转换到big_endian的形式
 * 
 * @参数: 
 * @param: little little_endian的表现形式
 * 
 * @返回: 
 * @return: uint16 big_endian的表现形式 
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 U16_little_big_endian(uint16 little);

/************************************************************************
 * @function: U32_little_big_endian
 * @描述: 从little_endian的形式转换到big_endian的形式
 * 
 * @参数: 
 * @param: little little_endian的表现形式
 * 
 * @返回: 
 * @return: uint32  big_endian的表现形式
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint32 U32_little_big_endian(uint32 little);

/************************************************************************
 * @function: CheckBufferCRC
 * @描述: 验证缓存中的CRC
 * 
 * @参数: 
 * @param: buffer 缓存
 * @param: size 缓存的大小
 * @param: end true CRC值在缓存结尾,false CRC值在缓存开头
 * 
 * @返回: 
 * @return: uint8  true 验证成功
 *                false 验证失败
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint8 CheckBufferCRC(uint8* buffer, uint16 size, uint8 end);

/************************************************************************
 * @function: BuildBufferCRC
 * @描述: 建立缓存中的CRC
 * 
 * @参数: 
 * @param: buffer 缓存
 * @param: size 缓存的大小
 * @param: end true CRC值在缓存结尾,false CRC值在缓存开头
 * @返回: 
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void BuildBufferCRC(uint8* buffer, uint16 size, uint8 end);

/************************************************************************
 * @function: sqrt_16
 * @描述: 开根号处理
 * 
 * @参数: 
 * @param: M 长整型
 * 
 * @返回: 
 * @return: uint16 整型 
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 sqrt_16(uint32 M);

/************************************************************************
 * @function: MidWaySearch
 * @描述: 中值法搜索想要的内容,Key为uint16类型
 * 
 * @参数: 
 * @param: pdata 需要搜索的内容.为目标结构体的数组的起始位置.结构体第一个元素必须是序号,uint16类型
 * @param: size 结构体总数
 * @param: len 每个结构体的长度
 * @param: id 目标序号
 * 
 * @返回: 
 * @return: uint16  
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 MidWaySearch(uint8* pdata, uint16 size, uint16 len, uint16 id);

/************************************************************************
 * @function: LongMidWaySearch
 * @描述: 中值法搜索想要的内容,Key为长整形
 * 
 * @参数: 
 * @param: pdata 需要搜索的内容.为目标结构体的数组的起始位置.结构体第一个元素必须是序号,uint32类型
 * @param: size 结构体总数
 * @param: len 每个结构体的长度
 * @param: id 目标序号
 * 
 * @返回: 
 * @return: uint16  
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 LongMidWaySearch(uint8* pdata, uint16 size, uint16 len, uint32 id);

/************************************************************************
 * @function: ADVMidWaySearch
 * @描述: 加强的中值法搜索想要的内容.即在中值法查找基础上,增加同类项支持
 * 
 * @参数: 
 * @param: pdata 需要搜索的内容.为目标结构体的数组的起始位置.结构体第一个元素必须是序号,uint16类型
 * @param: size 结构体总数
 * @param: len 每个结构体的长度
 * @param: id 目标序号
 * 
 * @返回: 
 * @return: uint16  
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 ADVMidWaySearch(const uint8* pdata, uint16 size, uint16 len, uint16 id);

/************************************************************************
 * @function: CopyBufferToStr
 * @描述: 将缓存里面的内容拷贝到结构体中
 * 
 * @参数: 
 * @param: sb 结构体描述信息
 * @param: buffer 缓存
 * @param: num 数量
 * @返回: 
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void CopyBufferToStr(const StrBuffer* sb, uint8* buffer, uint16 num);

/************************************************************************
 * @function: CopyStrToBuffer
 * @描述: 将结构体里面的内容拷贝到缓存里面
 * 
 * @参数: 
 * @param: sb 结构体描述信息
 * @param: buffer 缓存
 * @param: num 数量
 * @返回: 
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void CopyStrToBuffer(const StrBuffer* sb, uint8* buffer, uint16 num);

/************************************************************************
 * @function: CopyBufferToStrOffset
 * @描述: 将缓存里面的内容拷贝到结构体中
 * 
 * @参数: 
 * @param: sb 结构体描述信息
 * @param: str 结构体地址
 * @param: buffer 缓存
 * @param: num 数量
 * 
 * @返回: 
 * @return: uint16  操作的缓冲区的长度
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 CopyBufferToStrOffset(const StrBufOffset* sb, void* str, uint8* buffer, uint16 num);

/************************************************************************
 * @function: CopyStrToBufferOffset
 * @描述: 将结构体里面的内容拷贝到缓存里面
 * 
 * @参数: 
 * @param: sb 结构体描述信息
 * @param: str 结构体地址
 * @param: buffer 缓存
 * @param: num 数量
 * 
 * @返回: 
 * @return: uint16  操作的缓冲区长度
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 CopyStrToBufferOffset(const StrBufOffset* sb, void* str, uint8* buffer, uint16 num);

/************************************************************************
 * @function: FloatToFixPoint
 * @描述: 32位浮点数转换成定点数
 * 
 * @参数: 
 * @param: f 浮点数开始的缓存
 * @param: nf 转换好的小数位数 
 * 
 * @返回: 
 * @return: uint32  操作的缓冲区长度
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint32 FloatToFixPoint(uint8* f, uint8 nf);

/************************************************************************
 * @function: CalcUartRecvTimeOut
 * @描述: 根据串口波特率计算串口接收超时的延时时间
 * 
 * @参数: 
 * @param: baudrate 波特率
 * @param: 
 * 
 * @返回: 
 * @return: uint16 超时时间,单位ms
 * @说明: 
 * @作者: yzy (2013/6/6)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
uint16 CalcUartRecvTimeOut(uint32 baudrate);
uint32_t Calendar2Sec(TIME *pstime, uint8 isbcd);
void Sec2Calendar(TIME *pstime, uint32_t ulsec);
#endif



