/****************************************Copyright (c)*************************
**                               	_______科技有限公司
**                                     		开发部
**
**
**--------------文件信息-------------------------------------------------------
**文   件   名: dev_uart.c
**创   建   人: yzy
**最后修改日期: 2011年02月24日
**描        述: UART串口通道管理进程配置头文件
**注        意:
**--------------历史版本信息---------------------------------------------------
** 创建人: yzy
** 版  本: v1.0
** 日　期: 2018年01月17日
** 描　述: 原始版本
******************************************************************************/
#ifndef _DEV_UART_H_
#define _DEV_UART_H_

#ifndef EXT_DEV_UART
#define EXT_DEV_UART    extern
#endif




//	EXT_DEV_UART uint8 gucs_UartRevFlag[NO_OF_SERIAL];
//	EXT_DEV_UART uint8 gucs_UartRevStart[NO_OF_SERIAL];
//	EXT_DEV_UART uint8 gucs_UartRevByteTimeout[NO_OF_SERIAL];

/******************************************************************************
**串口进程管理相关
******************************************************************************/
//	EXT_DEV_UART kmutex_t gss_UartRes[NO_OF_SERIAL];              //串口占用资源量,同一时刻只能被一个进程占用
//	EXT_DEV_UART uint8  gucs_UartUserTkid[NO_OF_SERIAL];        //当前占用该端口的进程id,0xFF表示未被占用.





//	/******************************************************************************
//	**串口缓存接收状态
//	******************************************************************************/
//	EXT_DEV_UART uint8 gucs_UartRevFlag[NO_OF_SERIAL];


/*******************************************************************************
**串口处理回调函数
********************************************************************************/
//	EXT_DEV_UART TCallback gfs_SerialCallBack[NO_OF_SERIAL];    //__NULL表示无回调函数


/************************************************************************
 * @function: SER_Open
 * @描述: 串口打开
 * 
 * @参数: 
 * @param: ch 
 * @param: option option TDB_MODE_R:允许读 .TDB_MODE_W:允许写
 * 
 * @返回: 
 * @return: uint8  
 * @说明: 
 * @作者: yzy (2018/5/2)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
int32 SER_Open(uint8 ucChannelId, uint8 option);
	
	
/************************************************************************
 * @function: SER_Close
 * @描述: 串口关闭
 * 
 * @参数: 
 * @param: ch 
 * @返回: 
 * @说明: 
 * @作者: yzy (2018/5/2)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
int32 SER_Close(uint8 ucChannelId);
	
/************************************************************************
 * @function: SER_Clear
 * @描述: 清空串口缓存
 * 
 * @参数: 
 * @param: ch 
 * @返回: 
 * @说明: 
 * @作者: yzy (2013/8/28)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
int32 SER_Clear(uint8 ucChannelId);

/************************************************************************
 * @function: SYS_SER_Init
 * @描述: 串口初始化
 * 
 * @参数: 
 * @param: ch 
 * @param: ss 
 * @返回: 
 * @说明: 
 * @作者: yzy (2013/8/28)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
int32_t SER_Init(uint8 ucChannelId, uart_config_t * ss);



/************************************************************************
 * @function: SYS_SER_Read
 * @描述: 串口数据读取
 * 
 * @参数: 
 * @param: ch 端口
 * @param: buffer 输出缓存,__NULL表示丢弃
 * @param: length 读取长度
 * 
 * @返回: 
 * @return: uint16  实际读取长度
 * @说明: 
 * @作者: yzy (2013/8/28)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
//	uint16 SYS_SER_Read(uint8 ch, uint8* buffer, uint16 length);

/************************************************************************
 * @function: SER_Peek
 * @描述: 串口接收数据窥探,执行后数据仍然存在于接收缓存内
 * 
 * @参数: 
 * @param: ch 端口
 * @param: buffer 存放窥探数据的缓存
 * @param: start 从第几个数据开始窥探(0-) 
 * @param: length 待窥探数据长度
 * 
 * @返回: 
 * @return: uint16  窥探得到的实际数据长度
 * @说明: SYS_SER_Read()的部分功能
 * @作者: yzy (2013/8/28)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
//	int16 SER_Peek(uint8 ch, uint8* buffer, uint16 start, uint16 length);
//	
//	/************************************************************************
//	 * @function: SER_ReadByte
//	 * @描述: 从串口读取一个字节数据
//	 * 
//	 * @参数: 
//	 * @param: ch 
//	 * 
//	 * @返回: 
//	 * @return: uint16  
//	 * @说明: 
//	 * @作者: yzy (2013/8/28)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	int16 SER_ReadByte(uint8 ch);
//	
//	/************************************************************************
//	 * @function: SER_Line
//	 * @描述: 串口读取行命令(若未找到行结束符,串口缓存被读空)
//	 * 
//	 * @参数: 
//	 * @param: ch 端口号
//	 * @param: buffer 存放数据缓存,__NULL表示丢弃
//	 * @param: length 存放数据缓存的长度
//	 * 
//	 * @返回: 
//	 * @return: uint16  读取的行长度(包括一个结尾符).
//	 *          0表示无数据或未找到行结束符,1表示仅读到结尾符
//	 * @说明: 
//	 * @作者: yzy (2013/8/28)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	int16 SER_Line(uint8 ch, uint8* buffer, uint16 length);
//	
//	/************************************************************************
//	 * @function: SER_LineLen
//	 * @描述: 获取串口当前行长度
//	 * 
//	 * @参数: 
//	 * @param: ch 端口号
//	 * 
//	 * @返回: 
//	 * @return: uint16  行长度(包括一个结尾符)
//	 *          0表示无数据或未找到行结束符,1表示仅读到结尾符
//	 * @说明: 
//	 * @作者: yzy (2013/8/28)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	int16 SER_LineLen(uint8 ch);
//	
//	/************************************************************************
//	 * @function: SER_ToBeRead
//	 * @描述: 串口可读取数据的长度
//	 * 
//	 * @参数: 
//	 * @param: ch 
//	 * 
//	 * @返回: 
//	 * @return: uint16  
//	 * @说明: 
//	 * @作者: yzy (2013/8/28)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	int16 SER_ToBeRead(uint8 ch);
//	
/************************************************************************
 * @function: SER_ToBeRead_By_Port
 * @描述: 串口可读取数据的长度
 * 
 * @参数: 
 * @param: ch 
 * 
 * @返回: 
 * @return: uint16  
 * @说明: 
 * @作者: yzy (2013/8/28)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
int32_t SER_ToBeRead_By_Port(uint8 ucChannelId);
//	
//	
//	
//	/************************************************************************
//	 * @function: SYS_SER_WriteOption
//	 * @描述: 串口数据发送
//	 * 
//	 * @参数: 
//	 * @param: ch 串口号
//	 * @param: buffer 发送数据缓存
//	 * @param: length 发送数据长度
//	 * @param: opt 选项:b0=1串口性能优先,b0=0系统开销优先
//	 * 
//	 * @返回: 
//	 * @return: uint8  
//	 * @说明: 
//	 * @作者: yzy (2013/8/28)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	//	uint8 SYS_SER_WriteOption(uint8 ch, uint8 __far * buffer, uint16 length, uint16 opt);
//	
//	
//	/************************************************************************
//	 * @function: SYS_SER_Write
//	 * @描述: 串口数据发送
//	 * 
//	 * @参数: 
//	 * @param: ch 串口号
//	 * @param: buffer 发送数据缓存
//	 * @param: length 发送数据长度
//	 * 
//	 * @返回: 
//	 * @return: uint8  
//	 * @说明: 
//	 * @作者: yzy (2013/8/28)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	//	uint8 SYS_SER_Write(uint8 ch, uint8* buffer, uint16 length);
//	
//	
//	/************************************************************************
//	 * @function: SER_PrintValueOption
//	 * @描述: 发送数据,按照字符串的格式化进行发送
//	 * 
//	 * @参数: 
//	 * @param: ch 串口号
//	 * @param: str 发送的描述字符串
//	 * @param: value 发送的数据
//	 * @param: opt 选项:b0=1串口性能优先,b0=0系统开销优先
//	 * 
//	 * @返回: 
//	 * @return: uint8  成功/失败
//	 * @说明: 
//	 * @作者: yzy (2013/6/10)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	uint8 SER_PrintValueOption(uint8 ch, string str, int value, int32_t nTimeout);
//	
//	
//	/************************************************************************
//	 * @function: SER_PrintValue
//	 * @描述: 发送数据,按照字符串的格式化进行发送
//	 * 
//	 * @参数: 
//	 * @param: ch 串口号
//	 * @param: str 发送的描述字符串
//	 * @param: value 发送的数据
//	 * 
//	 * @返回: 
//	 * @return: uint8  成功/失败
//	 * @说明: 
//	 * @作者: yzy (2013/6/10)
//	 *-----------------------------------------------------------------------
//	 * @修改人: 
//	 ************************************************************************/
//	int32 SER_PrintValue(uint8 ch, uint8 * buff, uint16 buflen, int32 nTimeout, const int8 *strFormat, ...);


/************************************************************************
 * @function: SYS_UART_Init
 * @描述: 串口功能初始化
 * @参数: 
 * @返回: 
 * @说明: 
 * @作者: yzy (2013/8/28)
 *-----------------------------------------------------------------------
 * @修改人: 
 ************************************************************************/
void UART_Init(void);

/*==================================================================
//函数名：  SER_RecvData
//作者：    杨州宇
//日期：    2018-1-24
//功能：    串口接收数据
//输入参数：1、ucChannelId：串口通道号         
//          2、nMaxLen：期望接收到的最大字节数
//          3、nTimeout：接收超时时间（单位：毫秒），若为0，表示不等待
//输出参数：1、strData：要接收的数据
//返回值：  成功返回实际接收到的字节数，失败返回<0
//=================================================================*/
int32_t SER_RecvData(unsigned char ucChannelId, unsigned char *strData, 
							  int32 nMaxLen, int32 nTimeout);
/*==================================================================
//函数名：  UART_SendData
//作者：    杨州宇
//日期：    2018-1-24
//功能：    串口发送数据
//输入参数：1、ucChannelId：串口通道号
//          2、strData：要发送的数据
//          3、nDataLen：要发送的数据长度
//          4、nTimeout：发送超时时间（单位：毫秒）， 若为0， 表示不等待
//输出参数：无
//返回值：  成功返回0，失败返回<0
//=================================================================*/
int32_t SER_SendData(unsigned char ucChannelId, unsigned char *strData, 
                              int32 nDataLen, int32_t nTimeout);
//	/*==================================================================
//	//函数名：  SER_Read
//	//作者：    杨州宇
//	//日期：    2018-1-24
//	//功能：    串口接收数据
//	//输入参数：1、ucChannelId：串口通道号         
//	//          2、nMaxLen：期望接收到的最大字节数
//	//输出参数：1、strData：要接收的数据
//	//返回值：  成功返回实际接收到的字节数，失败返回<0
//	//=================================================================*/
//	int32_t SER_Read(unsigned char ucChannelId, unsigned char *strData, int32_t nMaxLen);

//	__SUart* __Uart_Find(unsigned char ucId);
void SYS_SER_RevMessageLoop(void);

//	SerialID * __Uart_Find(unsigned char ucId);

#endif
